Helpers
	letra_min = ['a' .. 'z'];
	letra_max = ['A' .. 'Z'];
	letras = letra_min | letra_max;
 	digito = ['0'..'9'];
	
	ascii = [0..255];

	espaco = ' ';
	ec = 13;
	ln = 10;
	tab = 9;
	ponto = '.';

	block_esq = '{';
	block_dir = '}';
	chave_esq = '[';
	chave_dir = ']';

Tokens
	inteiro  = digito+;
	identificador = (letras)+;
	
	// Tipos
	bool_t = 'answer';
	numero_t = 'number';
	string_t = 'symbol';
	vector_t = 'vector' (chave_esq (digito)+ chave_dir)+;

	imutavel_t = 'unalterable';
	mutavel_t  = 'alterable';

	// Operadores
		// Aritmeticos
	add = '+';
	sub = '-';
	mul = '*';
	div = '/';
	mod = '%';
	
		// Relacionais
	maior = '>';
	maior_igual = '>=';
	menor = '<';
	menor_igual = '<=';

	igual_a = '==';
	diferente_a = '!=';
	
		// Booleanos
	not = 'not';
	or = 'or';
	xor = 'xor';
	and = 'and';
	
	// Numeros
	num = ((negativo)?(digito)+) | (negativo)?(digito)+;

	// Palavras reservadas
	true  = 'yes';
	false = 'no';

	// Simbolos
	par_esq = '(';
	par_dir = ')';
	vazio = (espaco | rc | nl | tab)+;
	end_command = '.';
	
	
	// Estrutura de Controle
	while = 'as long as';
	if = 'in case that';
	else = 'otherwise';

	// Comentarios
	comment_line  = hifen hifen (espaco | rc | nl | tab | ascii)*;
	comment_block = block_esq hifen (espaco | rc | nl| tab | ascii)* hifen block_dir;

	block_start = 'start';
	block_end   = 'end';

Ignored Tokens
	vazio, comment_line, comment_block;
	