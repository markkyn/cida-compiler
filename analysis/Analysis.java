/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.analysis;

import cida.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAAProgAPrograma(AAProgAPrograma node);
    void caseAABlocoABloco(AABlocoABloco node);
    void caseAAAlterableADeclaracao(AAAlterableADeclaracao node);
    void caseAAUnalterableADeclaracao(AAUnalterableADeclaracao node);
    void caseAAUnalterableAtribADeclaracao(AAUnalterableAtribADeclaracao node);
    void caseAAVectorATipo(AAVectorATipo node);
    void caseAAAnswerTATipo(AAAnswerTATipo node);
    void caseAASymbolTATipo(AASymbolTATipo node);
    void caseAANumberTATipo(AANumberTATipo node);
    void caseAADimensaoADimensao(AADimensaoADimensao node);
    void caseAAAtribuicaoAComando(AAAtribuicaoAComando node);
    void caseAACaptureAComando(AACaptureAComando node);
    void caseAAShowAComando(AAShowAComando node);
    void caseAABlocoAComando(AABlocoAComando node);
    void caseAACaseDoOtherAComando(AACaseDoOtherAComando node);
    void caseAAAsLongAsAComando(AAAsLongAsAComando node);
    void caseAAConsideringAComando(AAConsideringAComando node);
    void caseAAExprAParams(AAExprAParams node);
    void caseAAIdALocal(AAIdALocal node);
    void caseAALocalALocal(AALocalALocal node);
    void caseAAXorAExpr(AAXorAExpr node);
    void caseAAOrAExpr(AAOrAExpr node);
    void caseAAAndAExpr(AAAndAExpr node);
    void caseAAAddAExpr(AAAddAExpr node);
    void caseAASubAExpr(AASubAExpr node);
    void caseAADivAExpr(AADivAExpr node);
    void caseAAMulAExpr(AAMulAExpr node);
    void caseAAModAExpr(AAModAExpr node);
    void caseAANotAExpr(AANotAExpr node);
    void caseAAMaiorAExpr(AAMaiorAExpr node);
    void caseAAMaiorIgualAExpr(AAMaiorIgualAExpr node);
    void caseAAMenorAExpr(AAMenorAExpr node);
    void caseAAMenorIgualAExpr(AAMenorIgualAExpr node);
    void caseAAIgualAAExpr(AAIgualAAExpr node);
    void caseAADiferenteAAExpr(AADiferenteAAExpr node);
    void caseAAInteiroAExpr(AAInteiroAExpr node);
    void caseAARealAExpr(AARealAExpr node);
    void caseAAStringAExpr(AAStringAExpr node);
    void caseAASymbolAExpr(AASymbolAExpr node);
    void caseAAIdAExpr(AAIdAExpr node);
    void caseAAParAExpr(AAParAExpr node);
    void caseAAAnswerAExpr(AAAnswerAExpr node);
    void caseAATrueAAnswer(AATrueAAnswer node);
    void caseAAFalseAAnswer(AAFalseAAnswer node);

    void caseTIntT(TIntT node);
    void caseTRealT(TRealT node);
    void caseTRecebe(TRecebe node);
    void caseTAnswerT(TAnswerT node);
    void caseTNumberT(TNumberT node);
    void caseTSymbolT(TSymbolT node);
    void caseTStringT(TStringT node);
    void caseTVectorT(TVectorT node);
    void caseTCode(TCode node);
    void caseTStart(TStart node);
    void caseTFinish(TFinish node);
    void caseTIdentificador(TIdentificador node);
    void caseTUnalterable(TUnalterable node);
    void caseTAlterable(TAlterable node);
    void caseTShow(TShow node);
    void caseTCapture(TCapture node);
    void caseTVirgula(TVirgula node);
    void caseTPonto(TPonto node);
    void caseTAdd(TAdd node);
    void caseTSub(TSub node);
    void caseTMul(TMul node);
    void caseTDiv(TDiv node);
    void caseTMod(TMod node);
    void caseTMaior(TMaior node);
    void caseTMaiorIgual(TMaiorIgual node);
    void caseTMenor(TMenor node);
    void caseTMenorIgual(TMenorIgual node);
    void caseTIgualA(TIgualA node);
    void caseTDiferenteA(TDiferenteA node);
    void caseTNot(TNot node);
    void caseTOr(TOr node);
    void caseTXor(TXor node);
    void caseTAnd(TAnd node);
    void caseTAs(TAs node);
    void caseTLong(TLong node);
    void caseTIn(TIn node);
    void caseTCase(TCase node);
    void caseTThat(TThat node);
    void caseTOtherwise(TOtherwise node);
    void caseTDo(TDo node);
    void caseTConsidering(TConsidering node);
    void caseTFrom(TFrom node);
    void caseTTo(TTo node);
    void caseTBy(TBy node);
    void caseTParEsq(TParEsq node);
    void caseTParDir(TParDir node);
    void caseTChaveEsq(TChaveEsq node);
    void caseTChaveDir(TChaveDir node);
    void caseTBlocEsq(TBlocEsq node);
    void caseTBlocDir(TBlocDir node);
    void caseTVazio(TVazio node);
    void caseTEndCommand(TEndCommand node);
    void caseTCommentLine(TCommentLine node);
    void caseTCommentBlock(TCommentBlock node);
    void caseTTrue(TTrue node);
    void caseTFalse(TFalse node);
    void caseTSymbol(TSymbol node);
    void caseTId(TId node);
    void caseTString(TString node);
    void caseTInteiro(TInteiro node);
    void caseTReal(TReal node);
    void caseTAuxLocalVirgula(TAuxLocalVirgula node);
    void caseTAuxExprVirgula(TAuxExprVirgula node);
    void caseTAuxBlocExprBloc(TAuxBlocExprBloc node);
    void caseTAuxRecbeExpr(TAuxRecbeExpr node);
    void caseTAuxOtherwiseDecCasam(TAuxOtherwiseDecCasam node);
    void caseTAuxOtherwiseDecSemCasam(TAuxOtherwiseDecSemCasam node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
