/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.analysis;

import java.util.*;
import cida.node.*;

public class ReversedDepthFirstAdapter extends AnalysisAdapter
{
    public void inStart(Start node)
    {
        defaultIn(node);
    }

    public void outStart(Start node)
    {
        defaultOut(node);
    }

    public void defaultIn(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    public void defaultOut(@SuppressWarnings("unused") Node node)
    {
        // Do nothing
    }

    @Override
    public void caseStart(Start node)
    {
        inStart(node);
        node.getEOF().apply(this);
        node.getPAPrograma().apply(this);
        outStart(node);
    }

    public void inAAProgAPrograma(AAProgAPrograma node)
    {
        defaultIn(node);
    }

    public void outAAProgAPrograma(AAProgAPrograma node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAProgAPrograma(AAProgAPrograma node)
    {
        inAAProgAPrograma(node);
        if(node.getABloco() != null)
        {
            node.getABloco().apply(this);
        }
        outAAProgAPrograma(node);
    }

    public void inAABlocoABloco(AABlocoABloco node)
    {
        defaultIn(node);
    }

    public void outAABlocoABloco(AABlocoABloco node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABlocoABloco(AABlocoABloco node)
    {
        inAABlocoABloco(node);
        {
            List<PAComando> copy = new ArrayList<PAComando>(node.getAComando());
            Collections.reverse(copy);
            for(PAComando e : copy)
            {
                e.apply(this);
            }
        }
        {
            List<PADeclaracao> copy = new ArrayList<PADeclaracao>(node.getADeclaracao());
            Collections.reverse(copy);
            for(PADeclaracao e : copy)
            {
                e.apply(this);
            }
        }
        outAABlocoABloco(node);
    }

    public void inAAAlterableADeclaracao(AAAlterableADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAAlterableADeclaracao(AAAlterableADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAlterableADeclaracao(AAAlterableADeclaracao node)
    {
        inAAAlterableADeclaracao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipo() != null)
        {
            node.getATipo().apply(this);
        }
        outAAAlterableADeclaracao(node);
    }

    public void inAAUnalterableADeclaracao(AAUnalterableADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAUnalterableADeclaracao(AAUnalterableADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAUnalterableADeclaracao(AAUnalterableADeclaracao node)
    {
        inAAUnalterableADeclaracao(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipo() != null)
        {
            node.getATipo().apply(this);
        }
        outAAUnalterableADeclaracao(node);
    }

    public void inAAUnalterableAtribADeclaracao(AAUnalterableAtribADeclaracao node)
    {
        defaultIn(node);
    }

    public void outAAUnalterableAtribADeclaracao(AAUnalterableAtribADeclaracao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAUnalterableAtribADeclaracao(AAUnalterableAtribADeclaracao node)
    {
        inAAUnalterableAtribADeclaracao(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        if(node.getATipo() != null)
        {
            node.getATipo().apply(this);
        }
        outAAUnalterableAtribADeclaracao(node);
    }

    public void inAAVectorATipo(AAVectorATipo node)
    {
        defaultIn(node);
    }

    public void outAAVectorATipo(AAVectorATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAVectorATipo(AAVectorATipo node)
    {
        inAAVectorATipo(node);
        {
            List<PADimensao> copy = new ArrayList<PADimensao>(node.getADimensao());
            Collections.reverse(copy);
            for(PADimensao e : copy)
            {
                e.apply(this);
            }
        }
        if(node.getATipo() != null)
        {
            node.getATipo().apply(this);
        }
        outAAVectorATipo(node);
    }

    public void inAAAnswerTATipo(AAAnswerTATipo node)
    {
        defaultIn(node);
    }

    public void outAAAnswerTATipo(AAAnswerTATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAnswerTATipo(AAAnswerTATipo node)
    {
        inAAAnswerTATipo(node);
        if(node.getAnswerT() != null)
        {
            node.getAnswerT().apply(this);
        }
        outAAAnswerTATipo(node);
    }

    public void inAASymbolTATipo(AASymbolTATipo node)
    {
        defaultIn(node);
    }

    public void outAASymbolTATipo(AASymbolTATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASymbolTATipo(AASymbolTATipo node)
    {
        inAASymbolTATipo(node);
        if(node.getSymbolT() != null)
        {
            node.getSymbolT().apply(this);
        }
        outAASymbolTATipo(node);
    }

    public void inAANumberTATipo(AANumberTATipo node)
    {
        defaultIn(node);
    }

    public void outAANumberTATipo(AANumberTATipo node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANumberTATipo(AANumberTATipo node)
    {
        inAANumberTATipo(node);
        if(node.getNumberT() != null)
        {
            node.getNumberT().apply(this);
        }
        outAANumberTATipo(node);
    }

    public void inAADimensaoADimensao(AADimensaoADimensao node)
    {
        defaultIn(node);
    }

    public void outAADimensaoADimensao(AADimensaoADimensao node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADimensaoADimensao(AADimensaoADimensao node)
    {
        inAADimensaoADimensao(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAADimensaoADimensao(node);
    }

    public void inAAAtribuicaoAComando(AAAtribuicaoAComando node)
    {
        defaultIn(node);
    }

    public void outAAAtribuicaoAComando(AAAtribuicaoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAtribuicaoAComando(AAAtribuicaoAComando node)
    {
        inAAAtribuicaoAComando(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getALocal() != null)
        {
            node.getALocal().apply(this);
        }
        outAAAtribuicaoAComando(node);
    }

    public void inAACaptureAComando(AACaptureAComando node)
    {
        defaultIn(node);
    }

    public void outAACaptureAComando(AACaptureAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAACaptureAComando(AACaptureAComando node)
    {
        inAACaptureAComando(node);
        {
            List<PAParams> copy = new ArrayList<PAParams>(node.getAParams());
            Collections.reverse(copy);
            for(PAParams e : copy)
            {
                e.apply(this);
            }
        }
        outAACaptureAComando(node);
    }

    public void inAAShowAComando(AAShowAComando node)
    {
        defaultIn(node);
    }

    public void outAAShowAComando(AAShowAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAShowAComando(AAShowAComando node)
    {
        inAAShowAComando(node);
        {
            List<PAParams> copy = new ArrayList<PAParams>(node.getAParams());
            Collections.reverse(copy);
            for(PAParams e : copy)
            {
                e.apply(this);
            }
        }
        outAAShowAComando(node);
    }

    public void inAABlocoAComando(AABlocoAComando node)
    {
        defaultIn(node);
    }

    public void outAABlocoAComando(AABlocoAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAABlocoAComando(AABlocoAComando node)
    {
        inAABlocoAComando(node);
        if(node.getABloco() != null)
        {
            node.getABloco().apply(this);
        }
        outAABlocoAComando(node);
    }

    public void inAACaseDoOtherAComando(AACaseDoOtherAComando node)
    {
        defaultIn(node);
    }

    public void outAACaseDoOtherAComando(AACaseDoOtherAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAACaseDoOtherAComando(AACaseDoOtherAComando node)
    {
        inAACaseDoOtherAComando(node);
        if(node.getOtherwise() != null)
        {
            node.getOtherwise().apply(this);
        }
        if(node.getDo() != null)
        {
            node.getDo().apply(this);
        }
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAACaseDoOtherAComando(node);
    }

    public void inAAAsLongAsAComando(AAAsLongAsAComando node)
    {
        defaultIn(node);
    }

    public void outAAAsLongAsAComando(AAAsLongAsAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAsLongAsAComando(AAAsLongAsAComando node)
    {
        inAAAsLongAsAComando(node);
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAAAsLongAsAComando(node);
    }

    public void inAAConsideringAComando(AAConsideringAComando node)
    {
        defaultIn(node);
    }

    public void outAAConsideringAComando(AAConsideringAComando node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAConsideringAComando(AAConsideringAComando node)
    {
        inAAConsideringAComando(node);
        if(node.getAComando() != null)
        {
            node.getAComando().apply(this);
        }
        if(node.getPulando() != null)
        {
            node.getPulando().apply(this);
        }
        if(node.getPara() != null)
        {
            node.getPara().apply(this);
        }
        if(node.getDe() != null)
        {
            node.getDe().apply(this);
        }
        outAAConsideringAComando(node);
    }

    public void inAAExprAParams(AAExprAParams node)
    {
        defaultIn(node);
    }

    public void outAAExprAParams(AAExprAParams node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAExprAParams(AAExprAParams node)
    {
        inAAExprAParams(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAAExprAParams(node);
    }

    public void inAAIdALocal(AAIdALocal node)
    {
        defaultIn(node);
    }

    public void outAAIdALocal(AAIdALocal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIdALocal(AAIdALocal node)
    {
        inAAIdALocal(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAIdALocal(node);
    }

    public void inAALocalALocal(AALocalALocal node)
    {
        defaultIn(node);
    }

    public void outAALocalALocal(AALocalALocal node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAALocalALocal(AALocalALocal node)
    {
        inAALocalALocal(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        if(node.getALocal() != null)
        {
            node.getALocal().apply(this);
        }
        outAALocalALocal(node);
    }

    public void inAAXorAExpr(AAXorAExpr node)
    {
        defaultIn(node);
    }

    public void outAAXorAExpr(AAXorAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAXorAExpr(AAXorAExpr node)
    {
        inAAXorAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAXorAExpr(node);
    }

    public void inAAOrAExpr(AAOrAExpr node)
    {
        defaultIn(node);
    }

    public void outAAOrAExpr(AAOrAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAOrAExpr(AAOrAExpr node)
    {
        inAAOrAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAOrAExpr(node);
    }

    public void inAAAndAExpr(AAAndAExpr node)
    {
        defaultIn(node);
    }

    public void outAAAndAExpr(AAAndAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAndAExpr(AAAndAExpr node)
    {
        inAAAndAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAAndAExpr(node);
    }

    public void inAAAddAExpr(AAAddAExpr node)
    {
        defaultIn(node);
    }

    public void outAAAddAExpr(AAAddAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAddAExpr(AAAddAExpr node)
    {
        inAAAddAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAAddAExpr(node);
    }

    public void inAASubAExpr(AASubAExpr node)
    {
        defaultIn(node);
    }

    public void outAASubAExpr(AASubAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASubAExpr(AASubAExpr node)
    {
        inAASubAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAASubAExpr(node);
    }

    public void inAADivAExpr(AADivAExpr node)
    {
        defaultIn(node);
    }

    public void outAADivAExpr(AADivAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADivAExpr(AADivAExpr node)
    {
        inAADivAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAADivAExpr(node);
    }

    public void inAAMulAExpr(AAMulAExpr node)
    {
        defaultIn(node);
    }

    public void outAAMulAExpr(AAMulAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMulAExpr(AAMulAExpr node)
    {
        inAAMulAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAMulAExpr(node);
    }

    public void inAAModAExpr(AAModAExpr node)
    {
        defaultIn(node);
    }

    public void outAAModAExpr(AAModAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAModAExpr(AAModAExpr node)
    {
        inAAModAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAModAExpr(node);
    }

    public void inAANotAExpr(AANotAExpr node)
    {
        defaultIn(node);
    }

    public void outAANotAExpr(AANotAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAANotAExpr(AANotAExpr node)
    {
        inAANotAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAANotAExpr(node);
    }

    public void inAAMaiorAExpr(AAMaiorAExpr node)
    {
        defaultIn(node);
    }

    public void outAAMaiorAExpr(AAMaiorAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMaiorAExpr(AAMaiorAExpr node)
    {
        inAAMaiorAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAMaiorAExpr(node);
    }

    public void inAAMaiorIgualAExpr(AAMaiorIgualAExpr node)
    {
        defaultIn(node);
    }

    public void outAAMaiorIgualAExpr(AAMaiorIgualAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMaiorIgualAExpr(AAMaiorIgualAExpr node)
    {
        inAAMaiorIgualAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAMaiorIgualAExpr(node);
    }

    public void inAAMenorAExpr(AAMenorAExpr node)
    {
        defaultIn(node);
    }

    public void outAAMenorAExpr(AAMenorAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMenorAExpr(AAMenorAExpr node)
    {
        inAAMenorAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAMenorAExpr(node);
    }

    public void inAAMenorIgualAExpr(AAMenorIgualAExpr node)
    {
        defaultIn(node);
    }

    public void outAAMenorIgualAExpr(AAMenorIgualAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAMenorIgualAExpr(AAMenorIgualAExpr node)
    {
        inAAMenorIgualAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAMenorIgualAExpr(node);
    }

    public void inAAIgualAAExpr(AAIgualAAExpr node)
    {
        defaultIn(node);
    }

    public void outAAIgualAAExpr(AAIgualAAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIgualAAExpr(AAIgualAAExpr node)
    {
        inAAIgualAAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAAIgualAAExpr(node);
    }

    public void inAADiferenteAAExpr(AADiferenteAAExpr node)
    {
        defaultIn(node);
    }

    public void outAADiferenteAAExpr(AADiferenteAAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAADiferenteAAExpr(AADiferenteAAExpr node)
    {
        inAADiferenteAAExpr(node);
        if(node.getDir() != null)
        {
            node.getDir().apply(this);
        }
        if(node.getEsq() != null)
        {
            node.getEsq().apply(this);
        }
        outAADiferenteAAExpr(node);
    }

    public void inAAInteiroAExpr(AAInteiroAExpr node)
    {
        defaultIn(node);
    }

    public void outAAInteiroAExpr(AAInteiroAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAInteiroAExpr(AAInteiroAExpr node)
    {
        inAAInteiroAExpr(node);
        if(node.getInteiro() != null)
        {
            node.getInteiro().apply(this);
        }
        outAAInteiroAExpr(node);
    }

    public void inAARealAExpr(AARealAExpr node)
    {
        defaultIn(node);
    }

    public void outAARealAExpr(AARealAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAARealAExpr(AARealAExpr node)
    {
        inAARealAExpr(node);
        if(node.getReal() != null)
        {
            node.getReal().apply(this);
        }
        outAARealAExpr(node);
    }

    public void inAAStringAExpr(AAStringAExpr node)
    {
        defaultIn(node);
    }

    public void outAAStringAExpr(AAStringAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAStringAExpr(AAStringAExpr node)
    {
        inAAStringAExpr(node);
        if(node.getString() != null)
        {
            node.getString().apply(this);
        }
        outAAStringAExpr(node);
    }

    public void inAASymbolAExpr(AASymbolAExpr node)
    {
        defaultIn(node);
    }

    public void outAASymbolAExpr(AASymbolAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAASymbolAExpr(AASymbolAExpr node)
    {
        inAASymbolAExpr(node);
        if(node.getSymbol() != null)
        {
            node.getSymbol().apply(this);
        }
        outAASymbolAExpr(node);
    }

    public void inAAIdAExpr(AAIdAExpr node)
    {
        defaultIn(node);
    }

    public void outAAIdAExpr(AAIdAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAIdAExpr(AAIdAExpr node)
    {
        inAAIdAExpr(node);
        if(node.getId() != null)
        {
            node.getId().apply(this);
        }
        outAAIdAExpr(node);
    }

    public void inAAParAExpr(AAParAExpr node)
    {
        defaultIn(node);
    }

    public void outAAParAExpr(AAParAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAParAExpr(AAParAExpr node)
    {
        inAAParAExpr(node);
        if(node.getAExpr() != null)
        {
            node.getAExpr().apply(this);
        }
        outAAParAExpr(node);
    }

    public void inAAAnswerAExpr(AAAnswerAExpr node)
    {
        defaultIn(node);
    }

    public void outAAAnswerAExpr(AAAnswerAExpr node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAAnswerAExpr(AAAnswerAExpr node)
    {
        inAAAnswerAExpr(node);
        if(node.getAAnswer() != null)
        {
            node.getAAnswer().apply(this);
        }
        outAAAnswerAExpr(node);
    }

    public void inAATrueAAnswer(AATrueAAnswer node)
    {
        defaultIn(node);
    }

    public void outAATrueAAnswer(AATrueAAnswer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAATrueAAnswer(AATrueAAnswer node)
    {
        inAATrueAAnswer(node);
        if(node.getTrue() != null)
        {
            node.getTrue().apply(this);
        }
        outAATrueAAnswer(node);
    }

    public void inAAFalseAAnswer(AAFalseAAnswer node)
    {
        defaultIn(node);
    }

    public void outAAFalseAAnswer(AAFalseAAnswer node)
    {
        defaultOut(node);
    }

    @Override
    public void caseAAFalseAAnswer(AAFalseAAnswer node)
    {
        inAAFalseAAnswer(node);
        if(node.getFalse() != null)
        {
            node.getFalse().apply(this);
        }
        outAAFalseAAnswer(node);
    }
}
