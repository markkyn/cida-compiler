/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.analysis;

import java.util.*;
import cida.node.*;

public class AnalysisAdapter implements Analysis
{
    private Hashtable<Node,Object> in;
    private Hashtable<Node,Object> out;

    @Override
    public Object getIn(Node node)
    {
        if(this.in == null)
        {
            return null;
        }

        return this.in.get(node);
    }

    @Override
    public void setIn(Node node, Object o)
    {
        if(this.in == null)
        {
            this.in = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.in.put(node, o);
        }
        else
        {
            this.in.remove(node);
        }
    }

    @Override
    public Object getOut(Node node)
    {
        if(this.out == null)
        {
            return null;
        }

        return this.out.get(node);
    }

    @Override
    public void setOut(Node node, Object o)
    {
        if(this.out == null)
        {
            this.out = new Hashtable<Node,Object>(1);
        }

        if(o != null)
        {
            this.out.put(node, o);
        }
        else
        {
            this.out.remove(node);
        }
    }

    @Override
    public void caseStart(Start node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAProgAPrograma(AAProgAPrograma node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAABlocoABloco(AABlocoABloco node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAlterableADeclaracao(AAAlterableADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAUnalterableADeclaracao(AAUnalterableADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAUnalterableAtribADeclaracao(AAUnalterableAtribADeclaracao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAVectorATipo(AAVectorATipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAnswerTATipo(AAAnswerTATipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAASymbolTATipo(AASymbolTATipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAANumberTATipo(AANumberTATipo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAADimensaoADimensao(AADimensaoADimensao node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAtribuicaoAComando(AAAtribuicaoAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAACaptureAComando(AACaptureAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAShowAComando(AAShowAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAABlocoAComando(AABlocoAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAACaseDoOtherAComando(AACaseDoOtherAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAsLongAsAComando(AAAsLongAsAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAConsideringAComando(AAConsideringAComando node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAExprAParams(AAExprAParams node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIdALocal(AAIdALocal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAALocalALocal(AALocalALocal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAXorAExpr(AAXorAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAOrAExpr(AAOrAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAndAExpr(AAAndAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAddAExpr(AAAddAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAASubAExpr(AASubAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAADivAExpr(AADivAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAMulAExpr(AAMulAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAModAExpr(AAModAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAANotAExpr(AANotAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAMaiorAExpr(AAMaiorAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAMaiorIgualAExpr(AAMaiorIgualAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAMenorAExpr(AAMenorAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAMenorIgualAExpr(AAMenorIgualAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIgualAAExpr(AAIgualAAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAADiferenteAAExpr(AADiferenteAAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAInteiroAExpr(AAInteiroAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAARealAExpr(AARealAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAStringAExpr(AAStringAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAASymbolAExpr(AASymbolAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAIdAExpr(AAIdAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAParAExpr(AAParAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAAnswerAExpr(AAAnswerAExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAATrueAAnswer(AATrueAAnswer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseAAFalseAAnswer(AAFalseAAnswer node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIntT(TIntT node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRealT(TRealT node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTRecebe(TRecebe node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnswerT(TAnswerT node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNumberT(TNumberT node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSymbolT(TSymbolT node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStringT(TStringT node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVectorT(TVectorT node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCode(TCode node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTStart(TStart node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFinish(TFinish node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIdentificador(TIdentificador node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTUnalterable(TUnalterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAlterable(TAlterable node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTShow(TShow node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCapture(TCapture node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVirgula(TVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTPonto(TPonto node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAdd(TAdd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSub(TSub node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMul(TMul node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiv(TDiv node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMod(TMod node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaior(TMaior node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMaiorIgual(TMaiorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenor(TMenor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTMenorIgual(TMenorIgual node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIgualA(TIgualA node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDiferenteA(TDiferenteA node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTNot(TNot node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOr(TOr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTXor(TXor node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAnd(TAnd node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAs(TAs node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTLong(TLong node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTIn(TIn node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCase(TCase node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTThat(TThat node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTOtherwise(TOtherwise node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTDo(TDo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTConsidering(TConsidering node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFrom(TFrom node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTo(TTo node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBy(TBy node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParEsq(TParEsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTParDir(TParDir node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTChaveEsq(TChaveEsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTChaveDir(TChaveDir node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlocEsq(TBlocEsq node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTBlocDir(TBlocDir node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTVazio(TVazio node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTEndCommand(TEndCommand node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentLine(TCommentLine node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTCommentBlock(TCommentBlock node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTTrue(TTrue node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTFalse(TFalse node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTSymbol(TSymbol node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTId(TId node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTString(TString node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTInteiro(TInteiro node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTReal(TReal node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAuxLocalVirgula(TAuxLocalVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAuxExprVirgula(TAuxExprVirgula node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAuxBlocExprBloc(TAuxBlocExprBloc node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAuxRecbeExpr(TAuxRecbeExpr node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAuxOtherwiseDecCasam(TAuxOtherwiseDecCasam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseTAuxOtherwiseDecSemCasam(TAuxOtherwiseDecSemCasam node)
    {
        defaultCase(node);
    }

    @Override
    public void caseEOF(EOF node)
    {
        defaultCase(node);
    }

    @Override
    public void caseInvalidToken(InvalidToken node)
    {
        defaultCase(node);
    }

    public void defaultCase(@SuppressWarnings("unused") Node node)
    {
        // do nothing
    }
}
