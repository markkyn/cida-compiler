/* This file was generated by SableCC (http://www.sablecc.org/). */

package cida.parser;

import cida.lexer.*;
import cida.node.*;
import cida.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    @SuppressWarnings({"unchecked","unused"})
    private void push(int numstate, ArrayList<Object> listNode) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PAPrograma node1 = (PAPrograma) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgPrograma */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list);
            }
            break;
            case 1: /* reduce AAblocobloco1Bloco */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list);
            }
            break;
            case 2: /* reduce AAblocobloco2Bloco */
            {
                ArrayList<Object> list = new2();
                push(goTo(1), list);
            }
            break;
            case 3: /* reduce AAblocobloco3Bloco */
            {
                ArrayList<Object> list = new3();
                push(goTo(1), list);
            }
            break;
            case 4: /* reduce AAblocobloco4Bloco */
            {
                ArrayList<Object> list = new4();
                push(goTo(1), list);
            }
            break;
            case 5: /* reduce AAlterableDeclaracao */
            {
                ArrayList<Object> list = new5();
                push(goTo(2), list);
            }
            break;
            case 6: /* reduce AUnalterableDeclaracao */
            {
                ArrayList<Object> list = new6();
                push(goTo(2), list);
            }
            break;
            case 7: /* reduce AUnalterableAtribDeclaracao */
            {
                ArrayList<Object> list = new7();
                push(goTo(2), list);
            }
            break;
            case 8: /* reduce ATipoBaseTipo */
            {
                ArrayList<Object> list = new8();
                push(goTo(3), list);
            }
            break;
            case 9: /* reduce AVectorTipo */
            {
                ArrayList<Object> list = new9();
                push(goTo(3), list);
            }
            break;
            case 10: /* reduce ADimensao */
            {
                ArrayList<Object> list = new10();
                push(goTo(4), list);
            }
            break;
            case 11: /* reduce AAnswerTipoBase */
            {
                ArrayList<Object> list = new11();
                push(goTo(5), list);
            }
            break;
            case 12: /* reduce ANumberTipoBase */
            {
                ArrayList<Object> list = new12();
                push(goTo(5), list);
            }
            break;
            case 13: /* reduce ASymbolTipoBase */
            {
                ArrayList<Object> list = new13();
                push(goTo(5), list);
            }
            break;
            case 14: /* reduce AComandoComando1 */
            {
                ArrayList<Object> list = new14();
                push(goTo(6), list);
            }
            break;
            case 15: /* reduce AAtribuicaoComando */
            {
                ArrayList<Object> list = new15();
                push(goTo(7), list);
            }
            break;
            case 16: /* reduce ACaptureComando */
            {
                ArrayList<Object> list = new16();
                push(goTo(7), list);
            }
            break;
            case 17: /* reduce AShowComando */
            {
                ArrayList<Object> list = new17();
                push(goTo(7), list);
            }
            break;
            case 18: /* reduce AComandoIfComando */
            {
                ArrayList<Object> list = new18();
                push(goTo(7), list);
            }
            break;
            case 19: /* reduce ABlocoComando */
            {
                ArrayList<Object> list = new19();
                push(goTo(7), list);
            }
            break;
            case 20: /* reduce AAexprparams1Params */
            {
                ArrayList<Object> list = new20();
                push(goTo(8), list);
            }
            break;
            case 21: /* reduce AAexprparams2Params */
            {
                ArrayList<Object> list = new21();
                push(goTo(8), list);
            }
            break;
            case 22: /* reduce AIdLocal */
            {
                ArrayList<Object> list = new22();
                push(goTo(9), list);
            }
            break;
            case 23: /* reduce ALocalLocal */
            {
                ArrayList<Object> list = new23();
                push(goTo(9), list);
            }
            break;
            case 24: /* reduce ADecCasamComandoIf */
            {
                ArrayList<Object> list = new24();
                push(goTo(10), list);
            }
            break;
            case 25: /* reduce AIfDecCasam */
            {
                ArrayList<Object> list = new25();
                push(goTo(11), list);
            }
            break;
            case 26: /* reduce ADecCasam */
            {
                ArrayList<Object> list = new26();
                push(goTo(11), list);
            }
            break;
            case 27: /* reduce AAsLongAsOutra */
            {
                ArrayList<Object> list = new27();
                push(goTo(12), list);
            }
            break;
            case 28: /* reduce AConsideringOutra */
            {
                ArrayList<Object> list = new28();
                push(goTo(12), list);
            }
            break;
            case 29: /* reduce ASozinhoDecSemCasam */
            {
                ArrayList<Object> list = new29();
                push(goTo(13), list);
            }
            break;
            case 30: /* reduce ASemCasamDecSemCasam */
            {
                ArrayList<Object> list = new30();
                push(goTo(13), list);
            }
            break;
            case 31: /* reduce AExpr2Expr */
            {
                ArrayList<Object> list = new31();
                push(goTo(14), list);
            }
            break;
            case 32: /* reduce AXorExpr */
            {
                ArrayList<Object> list = new32();
                push(goTo(14), list);
            }
            break;
            case 33: /* reduce AOrExpr */
            {
                ArrayList<Object> list = new33();
                push(goTo(14), list);
            }
            break;
            case 34: /* reduce AAndExpr */
            {
                ArrayList<Object> list = new34();
                push(goTo(14), list);
            }
            break;
            case 35: /* reduce AExpr3Expr2 */
            {
                ArrayList<Object> list = new35();
                push(goTo(15), list);
            }
            break;
            case 36: /* reduce AMaiorExpr2 */
            {
                ArrayList<Object> list = new36();
                push(goTo(15), list);
            }
            break;
            case 37: /* reduce AMenorExpr2 */
            {
                ArrayList<Object> list = new37();
                push(goTo(15), list);
            }
            break;
            case 38: /* reduce AMaiorIgualExpr2 */
            {
                ArrayList<Object> list = new38();
                push(goTo(15), list);
            }
            break;
            case 39: /* reduce AMenorIgualExpr2 */
            {
                ArrayList<Object> list = new39();
                push(goTo(15), list);
            }
            break;
            case 40: /* reduce AIgualAExpr2 */
            {
                ArrayList<Object> list = new40();
                push(goTo(15), list);
            }
            break;
            case 41: /* reduce ADiferenteAExpr2 */
            {
                ArrayList<Object> list = new41();
                push(goTo(15), list);
            }
            break;
            case 42: /* reduce AFatorExpr3 */
            {
                ArrayList<Object> list = new42();
                push(goTo(16), list);
            }
            break;
            case 43: /* reduce AAddExpr3 */
            {
                ArrayList<Object> list = new43();
                push(goTo(16), list);
            }
            break;
            case 44: /* reduce ASubExpr3 */
            {
                ArrayList<Object> list = new44();
                push(goTo(16), list);
            }
            break;
            case 45: /* reduce AFator2Fator */
            {
                ArrayList<Object> list = new45();
                push(goTo(17), list);
            }
            break;
            case 46: /* reduce AMulFator */
            {
                ArrayList<Object> list = new46();
                push(goTo(17), list);
            }
            break;
            case 47: /* reduce ADivFator */
            {
                ArrayList<Object> list = new47();
                push(goTo(17), list);
            }
            break;
            case 48: /* reduce AModFator */
            {
                ArrayList<Object> list = new48();
                push(goTo(17), list);
            }
            break;
            case 49: /* reduce ATermoFator2 */
            {
                ArrayList<Object> list = new49();
                push(goTo(18), list);
            }
            break;
            case 50: /* reduce ANotFator2 */
            {
                ArrayList<Object> list = new50();
                push(goTo(18), list);
            }
            break;
            case 51: /* reduce AInteiroTermo */
            {
                ArrayList<Object> list = new51();
                push(goTo(19), list);
            }
            break;
            case 52: /* reduce ARealTermo */
            {
                ArrayList<Object> list = new52();
                push(goTo(19), list);
            }
            break;
            case 53: /* reduce AStringTermo */
            {
                ArrayList<Object> list = new53();
                push(goTo(19), list);
            }
            break;
            case 54: /* reduce ASymbolTermo */
            {
                ArrayList<Object> list = new54();
                push(goTo(19), list);
            }
            break;
            case 55: /* reduce AAnswerTermo */
            {
                ArrayList<Object> list = new55();
                push(goTo(19), list);
            }
            break;
            case 56: /* reduce AIdTermo */
            {
                ArrayList<Object> list = new56();
                push(goTo(19), list);
            }
            break;
            case 57: /* reduce AParTermo */
            {
                ArrayList<Object> list = new57();
                push(goTo(19), list);
            }
            break;
            case 58: /* reduce ATrueAnswer */
            {
                ArrayList<Object> list = new58();
                push(goTo(20), list);
            }
            break;
            case 59: /* reduce AFalseAnswer */
            {
                ArrayList<Object> list = new59();
                push(goTo(20), list);
            }
            break;
            case 60: /* reduce ATerminal$Declaracao */
            {
                ArrayList<Object> list = new60();
                push(goTo(21), list);
            }
            break;
            case 61: /* reduce ANonTerminal$Declaracao */
            {
                ArrayList<Object> list = new61();
                push(goTo(21), list);
            }
            break;
            case 62: /* reduce ATerminal$Comando1 */
            {
                ArrayList<Object> list = new62();
                push(goTo(22), list);
            }
            break;
            case 63: /* reduce ANonTerminal$Comando1 */
            {
                ArrayList<Object> list = new63();
                push(goTo(22), list);
            }
            break;
            case 64: /* reduce ATerminal$Dimensao */
            {
                ArrayList<Object> list = new64();
                push(goTo(23), list);
            }
            break;
            case 65: /* reduce ANonTerminal$Dimensao */
            {
                ArrayList<Object> list = new65();
                push(goTo(23), list);
            }
            break;
            case 66: /* reduce ATerminal$Params */
            {
                ArrayList<Object> list = new66();
                push(goTo(24), list);
            }
            break;
            case 67: /* reduce ANonTerminal$Params */
            {
                ArrayList<Object> list = new67();
                push(goTo(24), list);
            }
            break;
            case 68: /* reduce ATerminal$Virgula */
            {
                ArrayList<Object> list = new68();
                push(goTo(25), list);
            }
            break;
            case 69: /* reduce ANonTerminal$Virgula */
            {
                ArrayList<Object> list = new69();
                push(goTo(25), list);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgPrograma */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAPrograma paprogramaNode1;
        {
            // Block
        PABloco pablocoNode2;
        pablocoNode2 = (PABloco)nodeArrayList3.get(0);

        paprogramaNode1 = new AAProgAPrograma(pablocoNode2);
        }
	nodeList.add(paprogramaNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AAblocobloco1Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABloco pablocoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        }

        pablocoNode1 = new AABlocoABloco(listNode2, listNode3);
        }
	nodeList.add(pablocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AAblocobloco2Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABloco pablocoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        }

        pablocoNode1 = new AABlocoABloco(listNode3, listNode4);
        }
	nodeList.add(pablocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce AAblocobloco3Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABloco pablocoNode1;
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        {
            // Block
        }
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList2.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        pablocoNode1 = new AABlocoABloco(listNode2, listNode4);
        }
	nodeList.add(pablocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AAblocobloco4Bloco */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PABloco pablocoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        LinkedList<Object> listNode5 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList2.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }
        {
            // Block
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        listNode4 = (LinkedList)nodeArrayList3.get(0);
	if(listNode4 != null)
	{
	  listNode5.addAll(listNode4);
	}
        }

        pablocoNode1 = new AABlocoABloco(listNode3, listNode5);
        }
	nodeList.add(pablocoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AAlterableDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PATipo patipoNode2;
        TId tidNode3;
        patipoNode2 = (PATipo)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        padeclaracaoNode1 = new AAAlterableADeclaracao(patipoNode2, tidNode3);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AUnalterableDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PATipo patipoNode2;
        TId tidNode3;
        patipoNode2 = (PATipo)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);

        padeclaracaoNode1 = new AAUnalterableADeclaracao(patipoNode2, tidNode3);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce AUnalterableAtribDeclaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADeclaracao padeclaracaoNode1;
        {
            // Block
        PATipo patipoNode2;
        TId tidNode3;
        PAExpr paexprNode4;
        patipoNode2 = (PATipo)nodeArrayList2.get(0);
        tidNode3 = (TId)nodeArrayList3.get(0);
        paexprNode4 = (PAExpr)nodeArrayList5.get(0);

        padeclaracaoNode1 = new AAUnalterableAtribADeclaracao(patipoNode2, tidNode3, paexprNode4);
        }
	nodeList.add(padeclaracaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce ATipoBaseTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        patipoNode1 = (PATipo)nodeArrayList1.get(0);
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AVectorTipo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        {
            // Block
        PATipo patipoNode2;
        LinkedList<Object> listNode4 = new LinkedList<Object>();
        patipoNode2 = (PATipo)nodeArrayList1.get(0);
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        listNode3 = (LinkedList)nodeArrayList3.get(0);
	if(listNode3 != null)
	{
	  listNode4.addAll(listNode3);
	}
        }

        patipoNode1 = new AAVectorATipo(patipoNode2, listNode4);
        }
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ADimensao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PADimensao padimensaoNode1;
        {
            // Block
        PAExpr paexprNode2;
        paexprNode2 = (PAExpr)nodeArrayList2.get(0);

        padimensaoNode1 = new AADimensaoADimensao(paexprNode2);
        }
	nodeList.add(padimensaoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AAnswerTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        {
            // Block
        TAnswerT tanswertNode2;
        tanswertNode2 = (TAnswerT)nodeArrayList1.get(0);

        patipoNode1 = new AAAnswerTATipo(tanswertNode2);
        }
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ANumberTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        {
            // Block
        TNumberT tnumbertNode2;
        tnumbertNode2 = (TNumberT)nodeArrayList1.get(0);

        patipoNode1 = new AANumberTATipo(tnumbertNode2);
        }
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce ASymbolTipoBase */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PATipo patipoNode1;
        {
            // Block
        TSymbolT tsymboltNode2;
        tsymboltNode2 = (TSymbolT)nodeArrayList1.get(0);

        patipoNode1 = new AASymbolTATipo(tsymboltNode2);
        }
	nodeList.add(patipoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce AComandoComando1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce AAtribuicaoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PALocal palocalNode2;
        PAExpr paexprNode3;
        palocalNode2 = (PALocal)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        pacomandoNode1 = new AAAtribuicaoAComando(palocalNode2, paexprNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce ACaptureComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pacomandoNode1 = new AACaptureAComando(listNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AShowComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        listNode2 = (LinkedList)nodeArrayList3.get(0);
	if(listNode2 != null)
	{
	  listNode3.addAll(listNode2);
	}
        }

        pacomandoNode1 = new AAShowAComando(listNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce AComandoIfComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce ABlocoComando */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PABloco pablocoNode2;
        pablocoNode2 = (PABloco)nodeArrayList1.get(0);

        pacomandoNode1 = new AABlocoAComando(pablocoNode2);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce AAexprparams1Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParams paparamsNode1;
        {
            // Block
        PAExpr paexprNode2;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);

        paparamsNode1 = new AAExprAParams(paexprNode2);
        }
	nodeList.add(paparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce AAexprparams2Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAParams paparamsNode1;
        {
            // Block
        PAExpr paexprNode2;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);

        paparamsNode1 = new AAExprAParams(paexprNode2);
        }
	nodeList.add(paparamsNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce AIdLocal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALocal palocalNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        palocalNode1 = new AAIdALocal(tidNode2);
        }
	nodeList.add(palocalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ALocalLocal */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PALocal palocalNode1;
        {
            // Block
        PALocal palocalNode2;
        PAExpr paexprNode3;
        palocalNode2 = (PALocal)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        palocalNode1 = new AALocalALocal(palocalNode2, paexprNode3);
        }
	nodeList.add(palocalNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce ADecCasamComandoIf */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AIfDecCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAComando pacomandoNode3;
        PAComando pacomandoNode4;
        paexprNode2 = (PAExpr)nodeArrayList5.get(0);
        pacomandoNode3 = (PAComando)nodeArrayList8.get(0);
        pacomandoNode4 = (PAComando)nodeArrayList10.get(0);

        pacomandoNode1 = new AACaseDoOtherAComando(paexprNode2, pacomandoNode3, pacomandoNode4);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce ADecCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce AAsLongAsOutra */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAComando pacomandoNode3;
        paexprNode2 = (PAExpr)nodeArrayList5.get(0);
        pacomandoNode3 = (PAComando)nodeArrayList8.get(0);

        pacomandoNode1 = new AAAsLongAsAComando(paexprNode2, pacomandoNode3);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce AConsideringOutra */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAComando pacomandoNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        PAExpr paexprNode4;
        PAComando pacomandoNode5;
        paexprNode2 = (PAExpr)nodeArrayList4.get(0);
        paexprNode3 = (PAExpr)nodeArrayList6.get(0);
        paexprNode4 = (PAExpr)nodeArrayList8.get(0);
        pacomandoNode5 = (PAComando)nodeArrayList10.get(0);

        pacomandoNode1 = new AAConsideringAComando(paexprNode2, paexprNode3, paexprNode4, pacomandoNode5);
        }
	nodeList.add(pacomandoNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce ASozinhoDecSemCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ASemCasamDecSemCasam */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList10 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList9 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList8 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList7 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AExpr2Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        paexprNode1 = (PAExpr)nodeArrayList1.get(0);
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce AXorExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAXorAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce AOrExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAOrAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AAndExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAAndAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AExpr3Expr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        paexprNode1 = (PAExpr)nodeArrayList1.get(0);
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AMaiorExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAMaiorAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AMenorExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAMenorAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AMaiorIgualExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAMaiorIgualAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AMenorIgualExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAMenorIgualAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AIgualAExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAIgualAAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce ADiferenteAExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AADiferenteAAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AFatorExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        paexprNode1 = (PAExpr)nodeArrayList1.get(0);
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AAddExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAAddAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce ASubExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AASubAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce AFator2Fator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        paexprNode1 = (PAExpr)nodeArrayList1.get(0);
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AMulFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAMulAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ADivFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AADivAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce AModFator */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AAModAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce ATermoFator2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        paexprNode1 = (PAExpr)nodeArrayList1.get(0);
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ANotFator2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        PAExpr paexprNode3;
        paexprNode2 = (PAExpr)nodeArrayList1.get(0);
        paexprNode3 = (PAExpr)nodeArrayList3.get(0);

        paexprNode1 = new AANotAExpr(paexprNode2, paexprNode3);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce AInteiroTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        TInteiro tinteiroNode2;
        tinteiroNode2 = (TInteiro)nodeArrayList1.get(0);

        paexprNode1 = new AAInteiroAExpr(tinteiroNode2);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ARealTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        TReal trealNode2;
        trealNode2 = (TReal)nodeArrayList1.get(0);

        paexprNode1 = new AARealAExpr(trealNode2);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce AStringTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        TString tstringNode2;
        tstringNode2 = (TString)nodeArrayList1.get(0);

        paexprNode1 = new AAStringAExpr(tstringNode2);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce ASymbolTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        TSymbol tsymbolNode2;
        tsymbolNode2 = (TSymbol)nodeArrayList1.get(0);

        paexprNode1 = new AASymbolAExpr(tsymbolNode2);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAnswerTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAAnswer paanswerNode2;
        paanswerNode2 = (PAAnswer)nodeArrayList1.get(0);

        paexprNode1 = new AAAnswerAExpr(paanswerNode2);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AIdTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        TId tidNode2;
        tidNode2 = (TId)nodeArrayList1.get(0);

        paexprNode1 = new AAIdAExpr(tidNode2);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AParTermo */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAExpr paexprNode1;
        {
            // Block
        PAExpr paexprNode2;
        paexprNode2 = (PAExpr)nodeArrayList2.get(0);

        paexprNode1 = new AAParAExpr(paexprNode2);
        }
	nodeList.add(paexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce ATrueAnswer */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAAnswer paanswerNode1;
        {
            // Block
        TTrue ttrueNode2;
        ttrueNode2 = (TTrue)nodeArrayList1.get(0);

        paanswerNode1 = new AATrueAAnswer(ttrueNode2);
        }
	nodeList.add(paanswerNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AFalseAnswer */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAAnswer paanswerNode1;
        {
            // Block
        TFalse tfalseNode2;
        tfalseNode2 = (TFalse)nodeArrayList1.get(0);

        paanswerNode1 = new AAFalseAAnswer(tfalseNode2);
        }
	nodeList.add(paanswerNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce ATerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PADeclaracao padeclaracaoNode1;
        padeclaracaoNode1 = (PADeclaracao)nodeArrayList1.get(0);
	if(padeclaracaoNode1 != null)
	{
	  listNode2.add(padeclaracaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new61() /* reduce ANonTerminal$Declaracao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PADeclaracao padeclaracaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padeclaracaoNode2 = (PADeclaracao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padeclaracaoNode2 != null)
	{
	  listNode3.add(padeclaracaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new62() /* reduce ATerminal$Comando1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAComando pacomandoNode1;
        pacomandoNode1 = (PAComando)nodeArrayList1.get(0);
	if(pacomandoNode1 != null)
	{
	  listNode2.add(pacomandoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new63() /* reduce ANonTerminal$Comando1 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAComando pacomandoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        pacomandoNode2 = (PAComando)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(pacomandoNode2 != null)
	{
	  listNode3.add(pacomandoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new64() /* reduce ATerminal$Dimensao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PADimensao padimensaoNode1;
        padimensaoNode1 = (PADimensao)nodeArrayList1.get(0);
	if(padimensaoNode1 != null)
	{
	  listNode2.add(padimensaoNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new65() /* reduce ANonTerminal$Dimensao */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PADimensao padimensaoNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        padimensaoNode2 = (PADimensao)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(padimensaoNode2 != null)
	{
	  listNode3.add(padimensaoNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new66() /* reduce ATerminal$Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        PAParams paparamsNode1;
        paparamsNode1 = (PAParams)nodeArrayList1.get(0);
	if(paparamsNode1 != null)
	{
	  listNode2.add(paparamsNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new67() /* reduce ANonTerminal$Params */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        PAParams paparamsNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        paparamsNode2 = (PAParams)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(paparamsNode2 != null)
	{
	  listNode3.add(paparamsNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new68() /* reduce ATerminal$Virgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode2 = new LinkedList<Object>();
        {
            // Block
        TVirgula tvirgulaNode1;
        tvirgulaNode1 = (TVirgula)nodeArrayList1.get(0);
	if(tvirgulaNode1 != null)
	{
	  listNode2.add(tvirgulaNode1);
	}
        }
	nodeList.add(listNode2);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new69() /* reduce ANonTerminal$Virgula */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        LinkedList<Object> listNode3 = new LinkedList<Object>();
        {
            // Block
        LinkedList<Object> listNode1 = new LinkedList<Object>();
        TVirgula tvirgulaNode2;
        listNode1 = (LinkedList)nodeArrayList1.get(0);
        tvirgulaNode2 = (TVirgula)nodeArrayList2.get(0);
	if(listNode1 != null)
	{
	  listNode3.addAll(listNode1);
	}
	if(tvirgulaNode2 != null)
	{
	  listNode3.add(tvirgulaNode2);
	}
        }
	nodeList.add(listNode3);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, ERROR, 0}, {8, SHIFT, 1}, },
			{{-1, ERROR, 1}, {55, SHIFT, 3}, },
			{{-1, ERROR, 2}, {65, ACCEPT, -1}, },
			{{-1, ERROR, 3}, {9, SHIFT, 4}, },
			{{-1, ERROR, 4}, {9, SHIFT, 4}, {10, SHIFT, 6}, {12, SHIFT, 7}, {13, SHIFT, 8}, {14, SHIFT, 9}, {15, SHIFT, 10}, {33, SHIFT, 11}, {35, SHIFT, 12}, {40, SHIFT, 13}, {55, SHIFT, 14}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 7}, {3, SHIFT, 25}, {4, SHIFT, 26}, {5, SHIFT, 27}, },
			{{-1, ERROR, 8}, {3, SHIFT, 25}, {4, SHIFT, 26}, {5, SHIFT, 27}, },
			{{-1, ERROR, 9}, {44, SHIFT, 31}, },
			{{-1, ERROR, 10}, {44, SHIFT, 32}, },
			{{-1, ERROR, 11}, {34, SHIFT, 33}, },
			{{-1, ERROR, 12}, {36, SHIFT, 34}, },
			{{-1, ERROR, 13}, {55, SHIFT, 14}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 19}, },
			{{-1, REDUCE, 60}, },
			{{-1, REDUCE, 62}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 19}, {2, SHIFT, 36}, {48, SHIFT, 37}, },
			{{-1, REDUCE, 18}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 23}, {9, SHIFT, 4}, {10, SHIFT, 38}, {12, SHIFT, 7}, {13, SHIFT, 8}, {14, SHIFT, 9}, {15, SHIFT, 10}, {33, SHIFT, 11}, {35, SHIFT, 12}, {40, SHIFT, 13}, {55, SHIFT, 14}, },
			{{-1, ERROR, 24}, {9, SHIFT, 4}, {10, SHIFT, 41}, {14, SHIFT, 9}, {15, SHIFT, 10}, {33, SHIFT, 11}, {35, SHIFT, 12}, {40, SHIFT, 13}, {55, SHIFT, 14}, },
			{{-1, REDUCE, 11}, },
			{{-1, REDUCE, 12}, },
			{{-1, REDUCE, 13}, },
			{{-1, ERROR, 28}, {55, SHIFT, 43}, },
			{{-1, ERROR, 29}, {55, SHIFT, 44}, },
			{{-1, REDUCE, 8}, {7, SHIFT, 45}, },
			{{-1, ERROR, 31}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 32}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 33}, {33, SHIFT, 64}, },
			{{-1, ERROR, 34}, {37, SHIFT, 65}, },
			{{-1, ERROR, 35}, {41, SHIFT, 66}, {48, SHIFT, 37}, },
			{{-1, ERROR, 36}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 37}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 61}, },
			{{-1, ERROR, 40}, {9, SHIFT, 4}, {10, SHIFT, 69}, {14, SHIFT, 9}, {15, SHIFT, 10}, {33, SHIFT, 11}, {35, SHIFT, 12}, {40, SHIFT, 13}, {55, SHIFT, 14}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 63}, },
			{{-1, REDUCE, 6}, {2, SHIFT, 70}, },
			{{-1, ERROR, 44}, {17, SHIFT, 71}, },
			{{-1, ERROR, 45}, {48, SHIFT, 72}, },
			{{-1, ERROR, 46}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 59}, },
			{{-1, REDUCE, 54}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 53}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 66}, },
			{{-1, REDUCE, 20}, {16, SHIFT, 76}, {30, SHIFT, 77}, {31, SHIFT, 78}, {32, SHIFT, 79}, },
			{{-1, REDUCE, 31}, {23, SHIFT, 81}, {24, SHIFT, 82}, {25, SHIFT, 83}, {26, SHIFT, 84}, {27, SHIFT, 85}, {28, SHIFT, 86}, },
			{{-1, REDUCE, 35}, {18, SHIFT, 87}, {19, SHIFT, 88}, },
			{{-1, REDUCE, 42}, {20, SHIFT, 89}, {21, SHIFT, 90}, {22, SHIFT, 91}, },
			{{-1, REDUCE, 45}, {29, SHIFT, 92}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 55}, },
			{{-1, ERROR, 62}, {44, SHIFT, 46}, {45, SHIFT, 93}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 63}, {44, SHIFT, 46}, {45, SHIFT, 95}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 64}, {44, SHIFT, 96}, },
			{{-1, ERROR, 65}, {44, SHIFT, 97}, },
			{{-1, ERROR, 66}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 67}, {17, SHIFT, 99}, {30, SHIFT, 77}, {31, SHIFT, 78}, {32, SHIFT, 79}, },
			{{-1, ERROR, 68}, {30, SHIFT, 77}, {31, SHIFT, 78}, {32, SHIFT, 79}, {49, SHIFT, 100}, },
			{{-1, REDUCE, 4}, },
			{{-1, ERROR, 70}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 72}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, REDUCE, 64}, },
			{{-1, REDUCE, 9}, {48, SHIFT, 72}, },
			{{-1, ERROR, 75}, {30, SHIFT, 77}, {31, SHIFT, 78}, {32, SHIFT, 79}, {45, SHIFT, 104}, },
			{{-1, REDUCE, 68}, },
			{{-1, ERROR, 77}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 78}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 79}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, REDUCE, 21}, {16, SHIFT, 108}, },
			{{-1, ERROR, 81}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 82}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 83}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 84}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 85}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 86}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 87}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 88}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 89}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 90}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 91}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 92}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 93}, {17, SHIFT, 121}, },
			{{-1, REDUCE, 67}, },
			{{-1, ERROR, 95}, {17, SHIFT, 122}, },
			{{-1, ERROR, 96}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 97}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, ERROR, 98}, {30, SHIFT, 77}, {31, SHIFT, 78}, {32, SHIFT, 79}, {42, SHIFT, 125}, },
			{{-1, REDUCE, 15}, },
			{{-1, REDUCE, 23}, },
			{{-1, ERROR, 101}, {17, SHIFT, 126}, {30, SHIFT, 77}, {31, SHIFT, 78}, {32, SHIFT, 79}, },
			{{-1, ERROR, 102}, {30, SHIFT, 77}, {31, SHIFT, 78}, {32, SHIFT, 79}, {49, SHIFT, 127}, },
			{{-1, REDUCE, 65}, },
			{{-1, REDUCE, 57}, },
			{{-1, REDUCE, 33}, {23, SHIFT, 81}, {24, SHIFT, 82}, {25, SHIFT, 83}, {26, SHIFT, 84}, {27, SHIFT, 85}, {28, SHIFT, 86}, },
			{{-1, REDUCE, 32}, {23, SHIFT, 81}, {24, SHIFT, 82}, {25, SHIFT, 83}, {26, SHIFT, 84}, {27, SHIFT, 85}, {28, SHIFT, 86}, },
			{{-1, REDUCE, 34}, {23, SHIFT, 81}, {24, SHIFT, 82}, {25, SHIFT, 83}, {26, SHIFT, 84}, {27, SHIFT, 85}, {28, SHIFT, 86}, },
			{{-1, REDUCE, 69}, },
			{{-1, REDUCE, 36}, {18, SHIFT, 87}, {19, SHIFT, 88}, },
			{{-1, REDUCE, 38}, {18, SHIFT, 87}, {19, SHIFT, 88}, },
			{{-1, REDUCE, 37}, {18, SHIFT, 87}, {19, SHIFT, 88}, },
			{{-1, REDUCE, 39}, {18, SHIFT, 87}, {19, SHIFT, 88}, },
			{{-1, REDUCE, 40}, {18, SHIFT, 87}, {19, SHIFT, 88}, },
			{{-1, REDUCE, 41}, {18, SHIFT, 87}, {19, SHIFT, 88}, },
			{{-1, REDUCE, 43}, {20, SHIFT, 89}, {21, SHIFT, 90}, {22, SHIFT, 91}, },
			{{-1, REDUCE, 44}, {20, SHIFT, 89}, {21, SHIFT, 90}, {22, SHIFT, 91}, },
			{{-1, REDUCE, 46}, {29, SHIFT, 92}, },
			{{-1, REDUCE, 47}, {29, SHIFT, 92}, },
			{{-1, REDUCE, 48}, {29, SHIFT, 92}, },
			{{-1, REDUCE, 50}, },
			{{-1, REDUCE, 17}, },
			{{-1, REDUCE, 16}, },
			{{-1, ERROR, 123}, {30, SHIFT, 77}, {31, SHIFT, 78}, {32, SHIFT, 79}, {45, SHIFT, 128}, },
			{{-1, ERROR, 124}, {30, SHIFT, 77}, {31, SHIFT, 78}, {32, SHIFT, 79}, {45, SHIFT, 129}, },
			{{-1, ERROR, 125}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, REDUCE, 7}, },
			{{-1, REDUCE, 10}, },
			{{-1, ERROR, 128}, {39, SHIFT, 131}, },
			{{-1, ERROR, 129}, {39, SHIFT, 132}, },
			{{-1, ERROR, 130}, {30, SHIFT, 77}, {31, SHIFT, 78}, {32, SHIFT, 79}, {43, SHIFT, 133}, },
			{{-1, ERROR, 131}, {9, SHIFT, 4}, {14, SHIFT, 9}, {15, SHIFT, 10}, {33, SHIFT, 11}, {35, SHIFT, 12}, {40, SHIFT, 13}, {55, SHIFT, 14}, },
			{{-1, ERROR, 132}, {9, SHIFT, 4}, {14, SHIFT, 9}, {15, SHIFT, 10}, {33, SHIFT, 11}, {35, SHIFT, 12}, {40, SHIFT, 13}, {55, SHIFT, 14}, },
			{{-1, ERROR, 133}, {44, SHIFT, 46}, {52, SHIFT, 47}, {53, SHIFT, 48}, {54, SHIFT, 49}, {55, SHIFT, 50}, {56, SHIFT, 51}, {57, SHIFT, 52}, {58, SHIFT, 53}, },
			{{-1, REDUCE, 27}, },
			{{-1, ERROR, 135}, {38, SHIFT, 137}, },
			{{-1, ERROR, 136}, {30, SHIFT, 77}, {31, SHIFT, 78}, {32, SHIFT, 79}, {39, SHIFT, 138}, },
			{{-1, ERROR, 137}, {9, SHIFT, 4}, {14, SHIFT, 9}, {15, SHIFT, 10}, {33, SHIFT, 11}, {35, SHIFT, 12}, {40, SHIFT, 13}, {55, SHIFT, 14}, },
			{{-1, ERROR, 138}, {9, SHIFT, 4}, {14, SHIFT, 9}, {15, SHIFT, 10}, {33, SHIFT, 11}, {35, SHIFT, 12}, {40, SHIFT, 13}, {55, SHIFT, 14}, },
			{{-1, REDUCE, 25}, },
			{{-1, REDUCE, 28}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 15}, {3, 5}, },
			{{-1, 16}, {23, 39}, },
			{{-1, 29}, },
			{{-1, 73}, {74, 103}, },
			{{-1, 28}, {8, 30}, },
			{{-1, 17}, {24, 42}, {40, 42}, },
			{{-1, 18}, {131, 134}, {132, 135}, {137, 139}, {138, 140}, },
			{{-1, 54}, {62, 94}, {63, 94}, },
			{{-1, 19}, {13, 35}, },
			{{-1, 20}, },
			{{-1, 21}, },
			{{-1, 22}, },
			{{-1, -1}, },
			{{-1, 55}, {36, 67}, {37, 68}, {46, 75}, {66, 98}, {70, 101}, {72, 102}, {96, 123}, {97, 124}, {125, 130}, {133, 136}, },
			{{-1, 56}, {77, 105}, {78, 106}, {79, 107}, },
			{{-1, 57}, {81, 109}, {82, 110}, {83, 111}, {84, 112}, {85, 113}, {86, 114}, },
			{{-1, 58}, {87, 115}, {88, 116}, },
			{{-1, 59}, {89, 117}, {90, 118}, {91, 119}, },
			{{-1, 60}, {92, 120}, },
			{{-1, 61}, },
			{{-1, 23}, },
			{{-1, 24}, {23, 40}, },
			{{-1, 74}, },
			{{-1, 62}, {32, 63}, },
			{{-1, 80}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'code'",
			"expecting: id",
			"expecting: EOF",
			"expecting: 'start'",
			"expecting: 'start', 'finish', 'unalterable', 'alterable', 'show', 'capture', 'as', 'in', 'considering', id",
			"expecting: 'start', 'finish', 'show', 'capture', 'as', 'in', 'otherwise', 'considering', id, EOF",
			"expecting: 'answer', 'number', 'symbol'",
			"expecting: '('",
			"expecting: 'long'",
			"expecting: 'case'",
			"expecting: '<<', 'from', '['",
			"expecting: 'start', 'finish', 'show', 'capture', 'as', 'in', 'otherwise', 'considering', id",
			"expecting: 'start', 'finish', 'show', 'capture', 'as', 'in', 'considering', id",
			"expecting: '<<', '['",
			"expecting: 'vector', id",
			"expecting: '(', 'yes', 'no', symbol, id, string, inteiro, real",
			"expecting: 'as'",
			"expecting: 'that'",
			"expecting: 'from', '['",
			"expecting: '<<', 'start', 'finish', 'unalterable', 'alterable', 'show', 'capture', 'as', 'in', 'considering', id",
			"expecting: '.'",
			"expecting: '['",
			"expecting: ',', '.', '+', '-', '*', '/', '%', '>', '>=', '<', '<=', '==', '!=', 'not', 'or', 'xor', 'and', 'do', 'to', 'by', '(', ')', ']', 'yes', 'no', symbol, id, string, inteiro, real",
			"expecting: '(', ')', 'yes', 'no', symbol, id, string, inteiro, real",
			"expecting: ',', 'or', 'xor', 'and', '(', ')', 'yes', 'no', symbol, id, string, inteiro, real",
			"expecting: ',', '.', '>', '>=', '<', '<=', '==', '!=', 'or', 'xor', 'and', 'do', 'to', 'by', '(', ')', ']', 'yes', 'no', symbol, id, string, inteiro, real",
			"expecting: ',', '.', '+', '-', '>', '>=', '<', '<=', '==', '!=', 'or', 'xor', 'and', 'do', 'to', 'by', '(', ')', ']', 'yes', 'no', symbol, id, string, inteiro, real",
			"expecting: ',', '.', '+', '-', '*', '/', '%', '>', '>=', '<', '<=', '==', '!=', 'or', 'xor', 'and', 'do', 'to', 'by', '(', ')', ']', 'yes', 'no', symbol, id, string, inteiro, real",
			"expecting: '.', 'or', 'xor', 'and'",
			"expecting: 'or', 'xor', 'and', ']'",
			"expecting: '[', id",
			"expecting: 'or', 'xor', 'and', ')'",
			"expecting: ',', '(', ')', 'yes', 'no', symbol, id, string, inteiro, real",
			"expecting: 'or', 'xor', 'and', 'to'",
			"expecting: 'do'",
			"expecting: 'or', 'xor', 'and', 'by'",
			"expecting: 'start', 'show', 'capture', 'as', 'in', 'considering', id",
			"expecting: 'otherwise'",
			"expecting: 'or', 'xor', 'and', 'do'",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 2, 5, 6, 6, 7, 7, 8, 9, 1, 10, 11, 4, 12, 12, 13, 11, 11, 11, 4, 12, 14, 14, 14, 1, 1, 14, 15, 15, 16, 17, 18, 15, 15, 5, 4, 12, 5, 12, 19, 20, 21, 15, 22, 22, 22, 22, 22, 22, 22, 23, 24, 25, 26, 27, 22, 22, 22, 23, 23, 7, 7, 15, 28, 29, 5, 15, 4, 15, 30, 30, 31, 32, 15, 15, 15, 32, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 20, 23, 20, 15, 15, 33, 11, 10, 28, 29, 30, 22, 25, 25, 25, 32, 26, 26, 26, 26, 26, 26, 27, 27, 22, 22, 22, 22, 11, 11, 31, 31, 15, 4, 30, 34, 34, 35, 36, 36, 15, 11, 37, 38, 36, 36, 11, 11, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
